//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hospital.DB
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities3 : DbContext
    {
        public Entities3()
            : base("name=Entities3")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AppointmentYulia> AppointmentYulias { get; set; }
        public virtual DbSet<DepartmentShitikova> DepartmentShitikovas { get; set; }
        public virtual DbSet<DiagnosisShitikova> DiagnosisShitikovas { get; set; }
        public virtual DbSet<EmployeeShitikova> EmployeeShitikovas { get; set; }
        public virtual DbSet<Gender> Genders { get; set; }
        public virtual DbSet<MedicalServiceShitikova> MedicalServiceShitikovas { get; set; }
        public virtual DbSet<OrderShitikova> OrderShitikovas { get; set; }
        public virtual DbSet<PatientDiagnosi> PatientDiagnosis { get; set; }
        public virtual DbSet<PatientShitikova> PatientShitikovas { get; set; }
        public virtual DbSet<PostShitikova> PostShitikovas { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TagOfClient> TagOfClients { get; set; }
        public virtual DbSet<BestEmployee> BestEmployees { get; set; }
        public virtual DbSet<CountGood> CountGoods { get; set; }
        public virtual DbSet<MarthService> MarthServices { get; set; }
        public virtual DbSet<MedicalService> MedicalServices { get; set; }
        public virtual DbSet<MedicalService2> MedicalService2 { get; set; }
        public virtual DbSet<MedicalService3> MedicalService3 { get; set; }
        public virtual DbSet<OctoberService> OctoberServices { get; set; }
        public virtual DbSet<Patient_Info> Patient_Info { get; set; }
        public virtual DbSet<Patient_Info2> Patient_Info2 { get; set; }
    
        public virtual ObjectResult<AllService_Result> AllService()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AllService_Result>("AllService");
        }
    
        public virtual ObjectResult<string> BestService()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BestService");
        }
    
        public virtual ObjectResult<Nullable<int>> CountPatient(string town, Nullable<System.DateTime> intervalstart, Nullable<System.DateTime> intervalend)
        {
            var townParameter = town != null ?
                new ObjectParameter("town", town) :
                new ObjectParameter("town", typeof(string));
    
            var intervalstartParameter = intervalstart.HasValue ?
                new ObjectParameter("intervalstart", intervalstart) :
                new ObjectParameter("intervalstart", typeof(System.DateTime));
    
            var intervalendParameter = intervalend.HasValue ?
                new ObjectParameter("intervalend", intervalend) :
                new ObjectParameter("intervalend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountPatient", townParameter, intervalstartParameter, intervalendParameter);
        }
    
        public virtual ObjectResult<CountSer_Result> CountSer(string titleser)
        {
            var titleserParameter = titleser != null ?
                new ObjectParameter("titleser", titleser) :
                new ObjectParameter("titleser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountSer_Result>("CountSer", titleserParameter);
        }
    
        public virtual int FindsService(string servicename, string timeservice, string phone)
        {
            var servicenameParameter = servicename != null ?
                new ObjectParameter("servicename", servicename) :
                new ObjectParameter("servicename", typeof(string));
    
            var timeserviceParameter = timeservice != null ?
                new ObjectParameter("timeservice", timeservice) :
                new ObjectParameter("timeservice", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("phone", phone) :
                new ObjectParameter("phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FindsService", servicenameParameter, timeserviceParameter, phoneParameter);
        }
    
        public virtual ObjectResult<MyHistory_Result> MyHistory(Nullable<int> idPacient)
        {
            var idPacientParameter = idPacient.HasValue ?
                new ObjectParameter("idPacient", idPacient) :
                new ObjectParameter("idPacient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MyHistory_Result>("MyHistory", idPacientParameter);
        }
    
        public virtual ObjectResult<MyINfo_Result> MyINfo(Nullable<int> idpatient)
        {
            var idpatientParameter = idpatient.HasValue ?
                new ObjectParameter("idpatient", idpatient) :
                new ObjectParameter("idpatient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MyINfo_Result>("MyINfo", idpatientParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<WILLWrite_Result> WILLWrite(Nullable<int> ipatient)
        {
            var ipatientParameter = ipatient.HasValue ?
                new ObjectParameter("ipatient", ipatient) :
                new ObjectParameter("ipatient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WILLWrite_Result>("WILLWrite", ipatientParameter);
        }
    
        public virtual ObjectResult<MyINfo2_Result> MyINfo2(Nullable<int> idpatient)
        {
            var idpatientParameter = idpatient.HasValue ?
                new ObjectParameter("idpatient", idpatient) :
                new ObjectParameter("idpatient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MyINfo2_Result>("MyINfo2", idpatientParameter);
        }
    
        public virtual ObjectResult<information_Result> information(Nullable<int> idpatient)
        {
            var idpatientParameter = idpatient.HasValue ?
                new ObjectParameter("idpatient", idpatient) :
                new ObjectParameter("idpatient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<information_Result>("information", idpatientParameter);
        }
    
        public virtual ObjectResult<INFO_Result> INFO(Nullable<int> ipatient)
        {
            var ipatientParameter = ipatient.HasValue ?
                new ObjectParameter("ipatient", ipatient) :
                new ObjectParameter("ipatient", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<INFO_Result>("INFO", ipatientParameter);
        }
    }
}
